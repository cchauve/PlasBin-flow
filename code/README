Files
- create_db.py
- filter_blast_mapping.py
- map_genes.py
are imported from HyAsP:
https://github.com/cchauve/HyAsP

TODO: 
1. Python libraries gzip, math versions required or in-built?
2. Headers in dataset files

# PlasBin-flow: A flow-based MILP algorithm for plasmid contigs binning
PlasBin-flow is based on a Mixed-Integer Linear Programming (MILP) formulation for detecting, for a bacterial sample, plasmid contigs bins from the  **assembly graph** (provided in <a href="http://gfa-spec.github.io/GFA-spec/">GFA format</a>) generated by the assembler <a href="https://github.com/rrwick/Unicycler">Unicycler</a>.

This directory contains the scripts required for tuning and executing PlasBin-flow.

# Prerequisites
PlasBin-flow is written in python (version 3.9.11) and requires the module NetworkX (version 2.7).  

It also requires the ILP solver Gurobi (Version 9.1.2+).  

The gene database creation and gene mapping steps require UNIX tools (curl and rm) and BLAST+ v2.6.0 (makeblastdb and blastn).
 
We strongly recommand to run PlasBin-flow using a dedicated python virtual environment (see https://docs.python.org/3.9/library/venv.html).  

The following python libraries are used in the scripts for tuning PlasBin-flow:
pandas: (2.0.0)
matplotlib: (3.7.0)
seaborn: (0.12.2)
Bio (Seq, SeqIO, SeqRecord): (1.81)
scipy (special, integrate): (1.10.1)
numpy: (1.24.2)

## Obtaining Gurobi license
PlasBin-flow uses the <a href="https://www.gurobi.com/">Gurobi Solver</a>.
To use PlasBin-flow, a Gurobi license is needed, which is free for academics.  

If you plan to use PlasBin-flow on an institutional High-Performance Computing system (such as a university cluster or a cluster of the <a href="https://alliancecan.ca/en">Digital Research Alliance of Canada</a>), we recommend that you contact a system administrator as it is lilely that such a license is already available.

Alternatively, to be used on a local system or on a local computer (all experiments in the paper *PlasBin-flow: A flow-based MILP algorithm for plasmid contigs binning* were ran on a laptop computer), you can obtain and install a free academic license following the instructions provided at <a href="https://www.gurobi.com/academia/academic-program-and-licenses/">Gurobi: Always Free for Academics</a>.

## Input
PlasBin-flow requires the following inputs:
1. The *assembly graph* of a bacterial sample, provided in <a href="http://gfa-spec.github.io/GFA-spec/">GFA format</a>, generated by <a href="https://github.com/rrwick/Unicycler">Unicycler</a>. The ability to process GFA files generated by <a href="https://github.com/ncbi/SKESA">SKESA</a> will soon be available.
2. A *plasmid gene mapping* TSV file describing the mapping of the genes from a plasmid genes database to the contigs of the analyzed assembly graph. The format of this file is the <a href="https://www.ncbi.nlm.nih.gov/books/NBK279684/table/appendices.T.options_common_to_all_blast/">blastn output format 6</a>.
3. A *GC content* TSV file containing on each line the probability for a contig to originate from a molecule of GC content within a given range (see section 2.5 of the paper *PlasBin-flow: A flow-based MILP algorithm for plasmid contigs binning*).
4. Two parameters, one each for contig length and plasmidness thresholds to qualify contigs as seeds. The conitg length threshold should be an integer while the plasmidness threshold should be a number between 0 and 1.

## Tuning PlasBin-flow
PlasBin-flow requires the user to provide certain parameters in order to generate the plasmid gene mapping file, the GC content file as well as the seed parameters described above. The following scripts help in generating the input for Plasbin-flow.

### Creating the plasmid gene mapping file

#### Creating a plasmid gene database
Prior to creating a plasmid gene mapping file, a database of plasmid genes should be created from a set of reference samples with known plasmids. 
```
python plasbin_utils.py pls_genes_db --input_file input_file --out_dir out_dir --tmp_dir tmp_dir
```
where `input_file` is a CSV file with one line per sample. Each line in the file requires the sample name and the path to a gzipped FASTA file with plasmid sequences for the sample. The `out_dir` is the directory where the plasmid genes database will be written, named as `pls.genes.fasta`. The `tmp_dir` is directory created to hold temporary files.
The set of genes from `pls.genes.fasta` will later be mapped onto contigs to determine the contig plasmidness. Note that if you already have a database of genes in FASTA format, the database creation step can be skipped.

#### Mapping genes to contigs
In this step, the plasmid genes from the database are mapped onto contigs of a given sample.
```
python plasbin_utils.py map_genes_to_ctgs --input_file input_file --out_dir out_dir --tmp_dir tmp_dir --db_file pls_db_file
```
where `input_file` is a CSV file with one line per sample. Each line in the file requires the sample name and the path to a gzipped GFA file for the sample. The `out_dir` is the directory where the output of the mapping is written to a file named <sample>.genes_mappings.txt. The `tmp_dir` is directory created to hold temporary files.
The `pls_db_file` is the path to plasmid genes database file created in the previous step.

### Computing seeds parameters from reference samples
PlasBin-flow takes two parameters as input as the contig length and plasmidness threshold to decide which contig from a given sample can be designated as seeds. Each plasmid bin output by PlasBin-flow should contain at least one seed contig. Seed parameters are decided by observing the length and plasmidness of contigs from the set of reference samples. 

#### Computing ground truth contig sets for reference samples
The length and plasmidness of contigs from reference samples are observed to decide seed parameters. Contigs from a sample are mapped onto the plasmid sequences from the sample to generate the set of contigs belonging to a particular plasmid. 
```
python plasbin_utils.py ground_truth --input_file input_file --out_dir out_dir --tmp_dir tmp_dir [--out_file out_file --pid_threshold p --cov_threshold c]
```
where `input_file` is a CSV file with one line per sample. Each line in the file requires the sample name, the path to a gzipped GFA file and the path to a gzipped FASTA file with plasmid sequences for the sample. The `out_dir` is the directory where the ground truth files are written under the name <sample>.ground_truth.tsv. The `tmp_dir` is directory created to hold temporary files. Parameters `p` and `c` can be used to provide the percent identity threshold to define a mapping to a plasmid (default=0.95) and the coverage threshold to accept a blast hit (default=0.8) respectively.

The resulting ground truth file lists contigs mapped to plasmids associated with the sample. A typical line in the ground truth (.tsv) file should contain the name or id of the plasmid in the first column and a contig that has been mapped to the plasmid in the second column. The file can contain other information as long as the first two columns contain the plasmid and contig ids respectively. 
```
#Pls_ID	Ctg_ID
P1	C1
P1	C2
P2	C3
```

#### Computing seed parameters 
The ground truth files generated above are now used to decide the pair of thresholds for contig length and plasmidness for defining seed contigs.
```
python plasbin_utils.py seeds --input_file input_file --out_dir out_dir --tmp_dir tmp_dir --db_file pls_db_file
```
where `input_file` is a CSV file with one line per sample. Each line in the file should contain the sample name, the path to a gzipped GFA file and the path to the ground truth file generated in the previous step. The `out_dir` is the directory where the seeds parameters file is written in `seeds.txt`. The `tmp_dir` is directory created to hold temporary files. The `pls_db_file` is the path to plasmid genes database file created in the database creation step.
Each line of the `seeds.txt` file contains a pair (plasmidness, length) of thesholds separated by a tab. Each pair is considered as one of the best seed parameters for samples in reference set. 

### Creating the GC content file

#### Computing GC intervals from tuning samples
The following script helps in deciding the GC content intervals for PlasBin-flow. It takes as input a list of reference chromosome and plasmid sequences and generates a violinplot of the GC content distribution for both types of sequences. The GC content intervals can then be decided by referring to the violinplots. Alternatively, we also provide a file with suggested GC content intervals according to the reference plasmid sequences.
```
python plasbin_utils.py gc_intervals --input_file input_file --out_dir out_dir --tmp_dir tmp_dir --n_gcints n_gcints
```
where `input_file` is a CSV file with one line per sample, where each line of the file contains the sample name, the path to a gzipped chromosome FASTA file as well as the path to a gzipped FASTA plasmids file. The `out_dir` is the directory where the output is written in the files gc.csv, gc.png and gc.txt. The file gc.csv contains the details of GC content of the sequences. The image file gc.png contains violinplot that can be used to visually decide the GC content intervals. Finally, the file gc.txt contains the suggested GC content intervals in the format required by PlasBin-flow. The `n_gcints` option allows to define the number of GC content intervals between 0 and 1, with a default value of 6 intervals. The `tmp_dir` is directory created to hold temporary files.

#### Computing GC content probabilities for samples
We then generated the GC content probabilities that are used to compute the GC content penalties in the objective function.
It takes as input an assembly graph file in GFA format (same as above) and optionally, a file specifying the endpoints of the GC content intervals. The output generated is a TSV file with one line per contig, with the probablities that a contig originates from a molecule of GC content within the pre-defined GC content ranges. 
```
python plasbin_utils.py gc_probabilities --input_file input_file --out_dir out_dir --tmp_dir tmp_dir --gc_intervals gc_intervals_file
```
where `input_file` a CSV file with one line per sample with each line consisting of the sample name and the path to a gzipped GFA file. The `out_dir` is the directory where the GC probabilities file for a sample is written under the file name <sample>.gc.tsv. The `gc_intervals_file` is the GC intervals file generated in the previous step. The `tmp_dir` is directory created to hold temporary files. 

### Tuning PlasBin-flow
The following command generates all the files required for tuning PlasBin-flow.
```
python plasbin_utils.py tuning --input_file input_file --out_dir out_dir --tmp_dir tmp_dir
``` 
where `input_file` is a CSV file with one line per sample with 5 required fields; the sample name and paths to a gzipped GFA file, a gzipped chromosome FASTA file, a gzipped plasmids FASTA file and the path to the ground truth file. The `output_dir` is the directory where the tuning files (plasmids genes database, GC content details, GC content distribution violinplot, GC content suggested intervals and GC content seed parameters) are written under the respective names mentioned above. Temporary files are stored under `tmp_dir`.

### Generating the input for PlasBin-flow
The following command generates all the input files required for tuning PlasBin-flow.
```
python plasbin_utils.py preprocessing --input_file input_file --out_dir out_dir --tmp_dir tmp_dir --pls_db pls_db --gc_intervals gc_intervals --out_file out_file
```
where `input_file` is a CSV file with one line per sample. Each line in the file requires the sample name and the path to a gzipped GFA file for the sample. The `output_dir` is the directory where the files to be used in PlasBin-flow are written: the plasmid genes to contigs mapping file (one per sample, <sample>.genes_mappings.txt) and the GC content probabilities file  (one per sample, <sample>.gc.tsv). The `pls_db` is the path to plasmid genes database file created in the database creation step while the `gc_intervals_file` is the GC intervals file generated in GC interval computation step.
The `out_file` is the augmented dataset CSV file, with mapping and GC probabilities files added for each sample.

## Running PlasBin-flow
The following script is used to implement PlasBin-flow after the input files and parameters have been generated using the tuning and preprocessing steps above.
```
python code/plasbin_flow.py -ag assembly_graph -gc gc_content_file -map gene_contig_mapping_file -lthr length_threshold -pthr plasmidness threshold\
		-outdir output_dir -outfile output_file -alpha1 alpha_1 -alpha2 alpha_2 -alpha3 alpha_3 -rmiter rmiter
```
where `assembly_graph` is the assembly graph file, `gc_content_file` is the GC content file described above and `gene_contig_mapping_file` is the gene mapping file described above. `lthr` and `pthr` are the length and plasmidness thresholds respectively, that are required to determine seed contigs.

Additional arguments:
```
-output_dir		Directory where the output files are written (required)
-output_file		Name of output file (required)
-rmiter			Maximum number of iterations to remove circular components. (optional, default: 50)
-alpha1			Weight of flow term. (optional, default: 1)                              
-alpha2			Weight of GC content term. (optional, default: 1)
-alpha3			Weight of gene density term. (optional, default: 1)
```

## PlasBin-flow output
The output of PlasBin-flow is a TSV file with each line containing the following information:
```
Plasmid bin			Number (ID) associated with the plasmid bin
Flow value			Flow value associated with the plasmid bin
GC bin				Index of GC content interval associated with the plasmid bin
Contigs				Comma-separated list of contigs associated with plasmid bin along with their multiplicities
```
Thus a typical line in an output file from PlasBin-flow looks as follows:
```
#Pls_ID	Flow	GC_bin		Contigs
P1	2.5	0.4-0.45	a:2,b:3,c:2,d:1
```
